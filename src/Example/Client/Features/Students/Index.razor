@using _ = ContosoUniversity.Shared.Features.Students.Index

@page "/Students"
@inject IRemotiatr _remotiatr
@inject NavigationManager _navigationManager;

<h2>Index</h2>

<Loading When="Data == null">

    <p>
        <a href="Students/Create">Create New</a>
    </p>

    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" @bind="_currentSearchString" />
            <button class="btn btn-primary" @onclick="SearchButtonClicked">Search</button> |
            <a href="" @onclick="BackToFullListClicked" @onclick:preventDefault>Back to Full List</a>
        </p>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>
                    <a href="" @onclick="NameHeaderClicked" @onclick:preventDefault><Label For="() => Data.Results.Items[0].LastName" /></a>
                </th>
                <th>
                    <Label For="() => Data.Results.Items[0].FirstMidName" />
                </th>
                <th>
                    <a href="" @onclick="DateHeaderClicked" @onclick:preventDefault><Label For="() => Data.Results.Items[0].EnrollmentDate" /></a>
                </th>
                <th>
                    <Label For="() => Data.Results.Items[0].EnrollmentsCount" />
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Data.Results.Items)
            {
                <tr>
                    <td>
                        @item.LastName
                    </td>
                    <td>
                        @item.FirstMidName
                    </td>
                    <td>
                        @item.EnrollmentDate.ToString("d")
                    </td>
                    <td>
                        @item.EnrollmentsCount
                    </td>
                    <td>
                        <a href="/Students/Edit/@item.Id">Edit</a> |
                        <a href="/Students/@item.Id">Details</a> |
                        <a href="/Students/Delete/@item.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @{
        var prevDisabled = !Data?.Results.HasPreviousPage ?? false ? "disabled" : "";
        var nextDisabled = !Data?.Results.HasNextPage ?? false ? "disabled" : "";
    }

    <button class="btn btn-primary @prevDisabled" @onclick="PreviousClicked">
        Previous
    </button>
    <button class="btn btn-primary @nextDisabled" @onclick="NextClicked">
        Next
    </button>

</Loading>

@code {
    private string _currentSortOrder;

    private string _currentSearchString;

    public _.Result Data;

    protected override Task OnInitializedAsync()
    {
        var queryParams = GetQueryParams();
        if (queryParams.TryGetValue("sortOrder", out var sortOrder)) _currentSortOrder = sortOrder.FirstOrDefault();
        if (queryParams.TryGetValue("searchString", out var searchString)) _currentSearchString = searchString.FirstOrDefault();
        queryParams.TryGetValue("page", out var page);
        var pageParam = int.TryParse(page.FirstOrDefault(), out var parsedPage) ? (int?)parsedPage : null;

        return Search(sortOrder.FirstOrDefault(), searchString.FirstOrDefault(), pageParam);

        IDictionary<string, StringValues> GetQueryParams()
        {
            var uri = new Uri(_navigationManager.Uri);

            return (uri.Query ?? String.Empty).Split('&')
                .Select(x =>
                {
                    var parts = x.Split('=');
                    if (parts.Length != 2) return default;
                    return (Name: parts[0], Value: parts[1]);
                })
                .Where(x => x.Name != null && x.Value != null)
                .ToDictionary(x => x.Name, x => new StringValues(x.Value));
        }
    }

    private Task SearchButtonClicked() => SearchAndUpdateUrl(_currentSortOrder, _currentSearchString, null);

    private Task NameHeaderClicked()
    {
        _currentSortOrder = _currentSortOrder == "name" ? "name_desc" : "name";
        return SearchAndUpdateUrl(_currentSortOrder, _currentSearchString, Data?.Results.PageIndex);
    }

    private Task DateHeaderClicked()
    {
        _currentSortOrder = _currentSortOrder == "date" ? "date_desc" : "date";
        return SearchAndUpdateUrl(_currentSortOrder, _currentSearchString, Data.Results.PageIndex);
    }

    private async Task PreviousClicked()
    {
        if (!Data.Results.HasPreviousPage) return;
        await SearchAndUpdateUrl(_currentSortOrder, _currentSearchString, Data.Results.PageIndex - 1);
    }

    private async Task NextClicked()
    {
        if (!Data.Results.HasNextPage) return;
        await SearchAndUpdateUrl(_currentSortOrder, _currentSearchString, Data.Results.PageIndex + 1);
    }

    private async Task BackToFullListClicked()
    {
        _currentSortOrder = null;
        _currentSearchString = null;
        await SearchAndUpdateUrl(_currentSortOrder, _currentSearchString, null);
    }

    private async Task Search(string sortOrder, string searchString, int? page) =>
        Data = await _remotiatr.Send(new _.Query { SortOrder = sortOrder, SearchString = searchString, Page = page });

    private void UpdateUrl(string sortOrder, string searchString, int? page)
    {
        var queryParams = new (string ParamName, string Value)[]
            {
                ("sortOrder", sortOrder),
                ("searchString", searchString),
                ("page", page?.ToString())
                }
            .Where(x => x.Value != null)
            .ToDictionary(x => x.ParamName, x => x.Value);

        var uri = new Uri(_navigationManager.Uri).AbsolutePath;

        if (queryParams.Any()) uri += "?" + String.Join('&', queryParams.Select(x => x.Key + '=' + x.Value));

        _navigationManager.NavigateTo(uri);
    }

    private Task SearchAndUpdateUrl(string sortOrder, string searchString, int? page)
    {
        UpdateUrl(sortOrder, searchString, page);
        return Search(sortOrder, searchString, page);
    }
}